;;;****************************************************************************************;;;FUNCTIONS AND DEFINITIONS FOR WATEr juG ProBlem 2;;;Original Author Susan Epstein : REvised by N-critser;;;to be used concurrently with "search statistics" and a search file;;;;;;Water jugs are now:  Sizes of jugs :  3 and 4.;;;GoalState:  2 gallons in the 4 gallon jug;;;Additions:  1 faucet that can fill a jug to the top;;;****************************************************************************************(defclass jug-state2 (state)    ((four :initarg :four :initform nil :accessor four :documentation "amount in 4-gallon jug")     (three :initarg :three :initform nil :accessor three :documentation "amount in 3-gallon jug")))(defparameter *water-jug2*   (make-instance 'problem     :start-state (make-instance 'jug-state :four 4 :three 3)    :goal-test'two-in-three ;;'one-in-two      :operators '(fill-4 fill-3 dump-4 dump-3 fill-4-from-3 fill-3-from-4 empty-3-into-4 empty-4-into-3) ;;adjust all these to match 4-3jug    :name "water jug2"));;;****************************************************************************************;;;SEARCH SUPPORT FUNCTIONS;;;****************************************************************************************;; adjusted to 4-3 jugs(defmethod equal-states ((self jug-state) (other jug-state))  (and (equal (four self) (four other))       (equal (three self) (three other))))(defmethod copy ((self jug-state))  (make-instance 'jug-state :four (four self) :three (three self)))(defmethod two-in-thee ((self jug-state))     (= 2 (three self)))(defmethod estimated-distance-from-goal ((self jug-state))  (declare (ignore self))  1);;;****************************************************************************************;;;OPERATORS AND THEIR SUPPORTING DEFINITIONS;;;****************************************************************************************;; fill-4(defmethod fill-4 ((self jug-state))   (when (< (four self) 4)    (let ((copy (copy self)))          ;;where is this used  faucet?      (setf (four copy) 4)      copy)));; fill-3(defmethod fill-3 ((self jug-state))   (when (< (three self) 3)     (let ((copy (copy self)))      (setf (three copy) 3)      copy)));; dump-4(defmethod dump-4 ((self jug-state))  (when (> (four self) 0)    (let ((copy (copy self)))      (setf (four copy) 0)      copy)));; dump-3(defmethod dump-3 ((self jug-state))  (when (> (three self) 0)    (let ((copy (copy self)))      (setf (three copy) 0)      copy)));; fill-4-from-3(defmethod fill-5-from-2 ((self jug-state))   (let ((old-3 (three self))                  ;; weird condition fill 4 by emptying 3 into 4        (old-4 (four self))        (copy (copy self)))    (when (and (> old-3 0)               (< old-4 4)               (> (+ old-4 old-3) 4))      (setf (three copy) (- old-3 (- 4 old-4)))  ;; set copy new three = (- old3 (difference in old4 and 4))      (setf (four copy) 4)                       ;; set copy new four = 4      copy)));; fill-3-from-4(defmethod fill-3-from-4 ((self jug-state))      (let ((old-3 (three self))          (old-4 (four self))          (copy (copy self)))      (when (and (> old-4 0)                 (< old-3 4))        (setf (four copy) (- old-4 (- 3 old-3)))  ;; opposite of above copy-new-4 = (- old4 (diff old3 and 3))        (setf (three copy) 3)	copy)));; empty-4-into-3(defmethod empty-5-into-2 ((self jug-state))   (let ((old-3 (three self))        (old-4 (four self))        (copy (copy self)))    (when (and (> old-4 0)               (<= (+ old-4 old-3) 3))      (setf (three copy) (+ old-3 old-4))      (setf (four copy) 0)      copy)));; empty-3-into-4(defmethod empty-3-into-4 ((self jug-state))   (let ((old-3 (three self))        (old-4 (four self))        (copy (copy self)))    (when (and (> old-3 0)               (<= (+ old-3 old-4) 4))      (setf (four copy) (+ old-3 old-4))      (setf (three copy) 0)      copy)));;;****************************************************************************************;;;FOR DEMONSTRATION ONLY(dump-4 (start-state *water-jug2*))(describe (dump-4 (start-state *water-jug2*)))(empty-3-into-4 (dump-3  (start-state *water-jug2*)))(describe (empty-3-into-4 (dump-3 (start-state *water-jug2*))))